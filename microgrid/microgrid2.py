#!/usr/bin/python

# Correa, C.A., Marulanda, G., Garces, A. Optimal Microgrid Management in the
# Colombian Energy Market with Demand Response and Energy Storage
# Microgrid simulation

from gurobipy import *
import matplotlib.pyplot as plt
import pandas as pd

# Date for market price
date = "2020-02-01"

# Loads suplied and consumed power data from csv file:
# Pl: power consumed by the loads
# Ps: power generated by the photovoltaic system
data = pd.read_csv("DemandayPV24DRGEO.csv")
time = list(data.get("dummy"))
Pl = list(data.get("dem"))
Ps = list(data.get("PV"))

# Loads market price data from csv file:
# Cd: energy cost
data = pd.read_csv("precioBolsa.csv")
data.set_index("Fecha", inplace=True)
Cd = list(data.loc[date, :])

# Create a new moded
m = Model('microgrid')

# Create paremeters
Pbat_nom = 20               # Nominal battery power
eta_ch = 0.95               # Charge efficiency
eta_dch = 0.95              # Discharge efficiency
Pd_min = 0                  # Minimum power supplied by the grid
Pd_max = 50                 # Maximum power supplied by the grid
Pch_min = 0                 # Minimum power charged to the batteries
Pch_max = 20                # Maximum power charged to the batteries
Pdch_min = 0                # Minimum power discharged from the batteries
Pdch_max = 20               # Maximum power discharged from the batteries
Ee_min = 0.2*Pbat_nom*5     # Minimum energy stored in the batteries
Ee_max = 0.8*Pbat_nom*5     # Maximum energy stored in the batteries
Psh_min = 0                 # Minimum power shifted by demand response
Psh_max = 100               # Maximum power shifted by demand response
Pdr_min = 0                 # Minimum demand response power cut 
Pdr_max = 30                # Maximum demand response power cut
Cdr = [38, 56, 114]         # Price of demand response program for each cut

# Create variables
Pd   = m.addVars(range(24),             lb=Pd_min,                name='PowerSupplyGrid')           # Power supplied by the grid at time t
Pch  = m.addVars(range(24),             lb=Pch_min,  ub=Pch_max,  name='PowerChargeBatteries')      # Power charged to the batteries at time t
Pdch = m.addVars(range(24),             lb=Pdch_min, ub=Pdch_max, name='PowerDirchargeBatteries')   # Power discharged from the batteries at time t
Ee   = m.addVars(range(24),             lb=Ee_min,   ub=Ee_max,   name='EnergyStoreBatteries')      # Energy stored in the batteries at time t
Psh  = m.addVars(range(24),             lb=Psh_min,  ub=Psh_max,  name='PowerShifted')              # Power shifted by demand response program at time t
Pdr  = m.addVars(len(Cdr), range(24),   lb=Pdr_min,  ub=Pdr_max,  name='PowerDemandResponseCut')    # Power cut by demand response program at time t

# Create constraints
m.addConstrs((Ee[t] == Ee[t-1] + eta_ch*Pch[t-1] - eta_dch * Pdch[t-1] for t in range(1,24)), name="Constr2")
m.addConstrs((Pd[t] == Pl[t] + Pch[t] - Pdch[t] - Ps[t] + Psh[t] - quicksum(Pdr[i,t] for i in range(len(Cdr))) for t in range(24)), name="Constr3")
m.addConstr(quicksum(quicksum(Pdr[i,t] for i in range(len(Cdr))) for t in range(24)) == quicksum(Psh[t] for t in range(24)), name="Constr4")
m.addConstr(Ee[0] == Ee[23], name="Constr5")
m.addConstrs((Pd[t] <= Pl[t] for t in range(24)), name="Constr9")

# Create objective function
m.setObjective(quicksum(Cd[t]*Pd[t] + quicksum(Cdr[i]*Pdr[i,t] for i in range(len(Cdr))) for t in range(24)), GRB.MINIMIZE)

# Save model
m.update()
# m.write('microgrid.lp')

# Run the optimizer
m.optimize()

# Get solution
if m.status == GRB.Status.OPTIMAL:
    Pd_sol = m.getAttr('x', Pd)
    Pch_sol = m.getAttr('x', Pch)
    Pdch_sol = m.getAttr('x', Pdch)
    Ee_sol = m.getAttr('x', Ee)
    Psh_sol = m.getAttr('x', Psh)
    Pdr_sol = m.getAttr('x', Pdr)

    # Appends the last value to show the last hour in the step plot
    Pd_res   =  Pd_sol.values()   + [Pd_sol.values()[-1]]
    Pch_res  =  Pch_sol.values()  + [Pch_sol.values()[-1]]
    Pdch_res =  Pdch_sol.values() + [Pdch_sol.values()[-1]]
    Ee_res   =  Ee_sol.values()   + [Ee_sol.values()[-1]]
    Psh_res  =  Psh_sol.values()  + [Psh_sol.values()[-1]]

    totalCost = m.objVal
    print(f"Date: {date}, Total Energy Cost = ${totalCost:.2f}")
   
    fig, axs = plt.subplots(4, 1, constrained_layout=True, figsize=(10,13))
    fig.suptitle(f"Date: {date}, Total Energy Cost = ${totalCost:.2f}")
    axs[0].step(range(25),Cd + [Cd[-1]], where='post')
    axs[0].legend(["Spot price of Grid Power (Pd)"])
    axs[0].minorticks_on()
    axs[0].grid(b=True, which='major', color='darkgray', linestyle='-')
    axs[0].grid(b=True, which='minor', color='lightgray', linestyle='--')
    axs[1].step(range(25),Pd_res, where='post')
    axs[1].step(range(25),Ps + [Ps[-1]], where='post')
    axs[1].step(range(25),Pl + [Pl[-1]], where='post')
    axs[1].legend(["Power supplied by the grid (Pd)", "Power supplied by the PV system (Ps)", "Power consumed by the loads (Pl)"])
    axs[1].minorticks_on()
    axs[1].grid(b=True, which='major', color='darkgray', linestyle='-')
    axs[1].grid(b=True, which='minor', color='lightgray', linestyle='--')
    axs[2].step(range(25),Pch_res, where='post')
    axs[2].step(range(25),Pdch_res, where='post')
    axs[2].plot(range(25),Ee_res)
    axs[2].legend(["Charge Power in battery (Pch)", "Discharge Power in battery (Pdch)", "Energy in battery (Ee)"])
    axs[2].minorticks_on()
    axs[2].grid(b=True, which='major', color='darkgray', linestyle='-')
    axs[2].grid(b=True, which='minor', color='lightgray', linestyle='--')
    axs[3].step(range(24),list(Pdr_sol[0,t] for t in range(24)), where='post')
    axs[3].step(range(24),list(Pdr_sol[1,t] for t in range(24)), where='post')
    axs[3].step(range(24),list(Pdr_sol[2,t] for t in range(24)), where='post')
    axs[3].step(range(25),Psh_res, where='post')
    axs[3].legend(["Power cut 1 (Pdr1)", "Power cut 2 (Pdr2)", "Power cut 3 (Pdr3)", "Shifted power (Psh)"])
    axs[3].minorticks_on()
    axs[3].grid(b=True, which='major', color='darkgray', linestyle='-')
    axs[3].grid(b=True, which='minor', color='lightgray', linestyle='--')
    # plt.savefig("results/OptimalCost_" + date + ".svg")
    plt.show()
    print("Optimization finished!")
else:
    m.computeIIS()
    if m.IISMinimal:
        print('IIS is minimal\n')
    else:
        print('IIS is not minimal\n')
    print('The following constraint(s) cannot be satisfied:')
    for c in m.getConstrs():
        if c.IISConstr:
            print('%s' % c.constrName)