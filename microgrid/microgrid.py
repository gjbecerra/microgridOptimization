#!/usr/bin/python

# Correa, C.A., Marulanda, G., Garces, A. Optimal Microgrid Management in the
# Colombian Energy Market with Demand Response and Energy Storage
# Microgrid simulation
import datetime

from helperFunctions import *

# Date for energy price, load power and photovoltaic power data
loadDate = datetime.date(2017,6,6)
priceDate = datetime.date(2019,6,6)
# Selects the type of energy price computation
# The options are "market", "creg" and "dynamic"
energyPriceType = "dynamic"

# Loads supplied and consumed power data from csv file:
# loadPower: power consumed by the loads
# pvPower: power generated by the photovoltaic system
# Pn: average net power load
loadPower, pvPower, Pn, Pnmean = readLoadPVData(loadDate,'59')

if energyPriceType == "market":
    # Loads market price data from csv file:
    # energyCost: energy cost
    data = pd.read_csv("precioBolsa.csv")
    data.set_index("Fecha", inplace=True)
    # Gets the hourly price for a given date
    energyCost = list(data.loc[priceDate.strftime("%Y-%m-%d"), :])
elif energyPriceType == "creg":
    energyCost = computeCregPrice()
elif energyPriceType == "dynamic":
    # Loads market price data from csv file:
    # energyCost: energy cost
    data = pd.read_csv("precioBolsa.csv")
    data.set_index("Fecha", inplace=True)
    # Gets the hourly market price for a given date
    Cm = list(data.loc[priceDate.strftime("%Y-%m-%d"), :])
    # Computes the daily mean for the complete dataset and stores it
    # as the last column of the dataframe
    data['dailymean'] = data.mean(axis=1)
    # Computes the mean market price for all the year
    Cmmean = data.loc[priceDate.strftime("%Y")+'-01-01':priceDate.strftime("%Y")+'-12-31','dailymean'].mean()
    Cu = 550   # Unit energy cost
    energyCost = list((Cu/2)*(Cm/Cmmean + Pn/Pnmean))

# Solves the optimizacion problem
[optimSolFound, gridPower_res, batteryChargePower_res, batteryDischargePower_res, batteryStoredEnergy_res, totalCost] = computeOptimalSolution(loadPower, pvPower, energyCost)

if optimSolFound:
    prepareFigure(priceDate, loadDate, totalCost, energyPriceType, energyCost, gridPower_res, pvPower, loadPower, batteryChargePower_res, batteryDischargePower_res, batteryStoredEnergy_res)
    print("Optimization finished!")
# else: